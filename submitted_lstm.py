# -*- coding: utf-8 -*-
"""Submitted-LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dWGHx_KsZyuRttEo8LmpU1I-24dhPjtz
"""

# List all NVIDIA GPUs as avaialble in this computer (or Colab's session)
!nvidia-smi -L

# Commented out IPython magic to ensure Python compatibility.


# For time stamps
from datetime import datetime

# For data dataframe
import pandas as pd
import numpy as np

# For plotting
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
sns.set_style('whitegrid')
sns.set(rc={'figure.dpi':150})

from keras.models import Sequential
from keras.layers import Dense, LSTM

import tensorflow as tf
print( f"TensorFlow {tf.__version__}" )
print( f"tf.keras.backend.image_data_format() = {tf.keras.backend.image_data_format()}" )

# Count the number of GPUs as detected by tensorflow
gpus = tf.config.list_physical_devices('GPU')
print( f"TensorFlow detected { len(gpus) } GPU(s):" )
for i, gpu in enumerate(gpus):
  print( f".... GPU No. {i}: Name = {gpu.name} , Type = {gpu.device_type}" )

df = pd.read_csv('/content/Updated_ETHUSDT_Data.csv')
df

"""Descriptive Statistics about the Data"""

# Summary Stats
df.describe()

"""Information About the Data"""

# General info
df.info()

"""Closing Price"""

plt.figure(figsize=(15,5))
plt.plot(df["Closed"],label='close price')
plt.legend()
plt.title('Closing Price of ETH')
plt.xlabel('Second')
plt.ylabel('Price(USD)')

"""Volume of Sales"""

plt.figure(figsize=(15,5))
plt.plot(df["Volume"],label='volume')
plt.legend()
plt.title('Volume Sales for ETH')
plt.xlabel('Second')
plt.ylabel('Volume')

"""Price change"""

plt.figure(figsize=(15,5))
df['pct_chg'].hist(bins=100)
plt.legend()
plt.title('ETH')
plt.xlabel('Price change')
plt.ylabel('Counts')

"""Model"""

# Create a new dataframe with only the 'Close column
data = df.filter(['Closed'])
# Convert the dataframe to a numpy array
dataset = data.values
# Get the number of rows to train the model on
training_data_len = int(np.ceil( len(dataset) * .2 ))

training_data_len

# Scale the data
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# Create the training data set
# Create the scaled training data set
train_data = scaled_data[0:int(training_data_len), :]
# Split the data into x_train and y_train data sets
x_train = []
y_train = []

for i in range(180, len(train_data)):
    x_train.append(train_data[i-180:i, 0])
    y_train.append(train_data[i, 0])
    if i<= 181:
        print(x_train)
        print(y_train)
        print()

# Convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
# x_train.shape

# Build the LSTM model
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create the testing data set
# Create a new array containing scaled values from index 1543 to 2002
test_data = scaled_data[training_data_len - 180: , :]
# Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(180, len(test_data)):
    x_test.append(test_data[i-180:i, 0])

# Convert the data to a numpy array
x_test = np.array(x_test)

# Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

# Get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
rmse

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
# Visualize the data
plt.figure(figsize=(16,6))
plt.title('Model')
plt.xlabel('Second', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.plot(train['Closed'])
plt.plot(valid[['Closed', 'Predictions']])
plt.legend(['Train','Var', 'Predictions'], loc='lower right')
plt.show()

# Show the valid and predicted prices
valid